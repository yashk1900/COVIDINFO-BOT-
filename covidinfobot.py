# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DeG09ubKiQO19DYUU5oMw-5uO6PbVNC3
"""

pip install nltk

pip install anvil-uplink

import anvil.server

anvil.server.connect("G4OMTHS76V2QHYP6BPUS74K5-2V5GPGIM3OJ65QAX")

import nltk

nltk.download()

from sklearn.feature_extraction.text import TfidfVectorizer

import nltk
import numpy as np
import random
import string # to process standard python strings

f=open('coronavirus.txt','r',errors = 'ignore')
raw=f.read()
raw=raw.lower()# converts to lowercase
nltk.download('punkt') # first-time use only,The NLTK data package includes a pre-trained Punkt tokenizer for English.
nltk.download('wordnet') # first-time use only
sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences 
word_tokens = nltk.word_tokenize(raw)# converts to list of words

print(sent_tokens)
print(word_tokens)

lemmer = nltk.stem.WordNetLemmatizer()
#WordNet is a semantically-oriented dictionary of English included in NLTK,Lemmatization is
# the process of grouping together the different inflected forms of a word so they can be analysed as a single item

def LemTokens(tokens):#function to which we will send an array of tokens to lemmatise it
    return [lemmer.lemmatize(token) for token in tokens]

remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)#mapping the punctuations

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))


from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.metrics.pairwise import cosine_similarity

def response(user_response):
    robo_response=''
    user_response=user_response.lower()
    sent_tokens.append(user_response)
    print(sent_tokens)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)#finds similarity between text
    # user entered and dataset
    idx=vals.argsort()[0][-2]#there is only 1 row and we want to find the largest matching which isnt with itself
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx]
        return robo_response

@anvil.server.callable
def get_answer(user_input):
  answer = response(user_input)
  sent_tokens.pop()
  return answer

anvil.server.wait_forever()